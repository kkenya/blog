AWSTemplateFormatVersion: 2010-09-09

Description: create s3 bucket

Mappings:
  ZoneMap:
    PublicHostedZone:
      Domain: gekishaman.work

Resources:
  S3BucketPublic:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketName: !FindInMap
        - ZoneMap
        - PublicHostedZone
        - Domain
      LifecycleConfiguration:
        Rules:
          - Id: NoncurrentVersionExpiration
            Status: Enabled
            NoncurrentVersionExpirationInDays: 3
      LoggingConfiguration:
        DestinationBucketName: !Ref 'S3BucketAccesslogs'
        LogFilePrefix: !Sub 's3/${AWS::StackName}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: false
        IgnorePublicAcls: true
        RestrictPublicBuckets: false
      VersioningConfiguration:
        Status: Enabled
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: 404.html
      Tags:
        - Key: CloudFormationArn
          Value: !Sub '${AWS::StackName}'

  S3BucketAccesslogs:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      AccessControl: LogDeliveryWrite
      BucketName: !Sub '${AWS::StackName}-accesslogs-${AWS::Region}-${AWS::AccountId}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Id: AutoDelete
            Status: Enabled
            ExpirationInDays: 30
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: CloudFormationArn
          Value: !Sub '${AWS::StackName}'

  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref 'S3BucketPublic'
      PolicyDocument:
        Id: !Sub '${AWS::StackName}-BucketPolicy'
        Statement:
          - Sid: AddPerm
            Effect: Allow
            Principal: '*'
            Action:
              - s3:GetObject
            Resource:
              - !Sub 'arn:aws:s3:::${S3BucketPublic}/*'
            Condition:
              StringEquals:
                aws:UserAgent: Amazon CloudFront
          - Sid: AddPerm
            Effect: Allow
            Principal: '*'
            Action:
              - s3:GetObject
            Resource:
              - !Sub 'arn:aws:s3:::${S3BucketPublic}/*'
            Condition:
              IpAddress:
                aws:SourceIp:
                  - 127.0.0.1/32
                  #- 0.0.0.0/0
                  #- ::/0

Outputs:
  PublicBucketName:
    Description: s3 public bucket name
    Value: !Ref S3BucketPublic
    Export:
      Name: !Sub '${AWS::StackName}-PublicBucket'
  AccesslogBucketName:
    Description: s3 accesslog bucket name
    Value: !Ref S3BucketAccesslogs
    Export:
      Name: !Sub '${AWS::StackName}-AccesslogBucket'
